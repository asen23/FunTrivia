{"version":3,"sources":["Components/Button.js","Components/Trivia.js","Components/Setting.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","onClick","name","Trivia","useState","isLoading","setIsLoading","trivia","setTrivia","answers","setAnswers","undefined","isCorrect","setIsCorrect","retry","setRetry","isError","setIsError","getTrivia","useCallback","fetch","url","mode","then","response","json","results","allAnswer","incorrect_answers","push","correct_answer","sort","Math","random","catch","error","useEffect","ButtonList","exit","src","alt","category","difficulty","dangerouslySetInnerHTML","__html","question","map","answer","onAnswer","easy","medium","hard","checkAnswer","Setting","categories","setCategories","type","setType","setDifficulty","setCategory","trivia_categories","setting","SelectForm","htmlFor","id","label","value","onChange","event","target","options","concat","onBack","App","highscore","setHighscore","score","setScore","hasOldScore","setHasOldScore","setSetting","history","useHistory","lastHighscore","localStorage","getItem","parseInt","sessionStorage","lastSetting","JSON","parse","Continue","path","encodeURIComponent","getURL","point","setItem","toString","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"qMAaeA,MAXf,SAAgBC,GACZ,OACI,wBACIC,UAAU,4CACVC,QAASF,EAAME,QAFnB,SAIKF,EAAMG,QC8HJC,MAnIf,SAAgBJ,GAAQ,IAAD,EACeK,oBAAS,GADxB,mBACZC,EADY,KACDC,EADC,OAESF,mBAAS,IAFlB,mBAEZG,EAFY,KAEJC,EAFI,OAGWJ,mBAAS,IAHpB,mBAGZK,EAHY,KAGHC,EAHG,OAIeN,wBAASO,GAJxB,mBAIZC,EAJY,KAIDC,EAJC,OAKOT,mBAAS,GALhB,mBAKZU,EALY,KAKLC,EALK,OAMWX,oBAAS,GANpB,mBAMZY,EANY,KAMHC,EANG,KAObC,EAAYC,uBAAY,WAC1Bb,GAAa,GACbc,MAAMrB,EAAMsB,IAAK,CACbC,KAAM,SAELC,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACC,GACHT,EAAS,GACTP,EAAUgB,EAASE,QAAQ,IAC3B,IAAIC,EAAYH,EAASE,QAAQ,GAAGE,kBACpCD,EAAUE,KAAKL,EAASE,QAAQ,GAAGI,gBACnCH,EAAUI,MAAK,iBAAM,GAAMC,KAAKC,YAChCvB,EAAWiB,GACXrB,GAAa,MAEhB4B,OAAM,SAACC,GACArB,EAAQ,EACRC,EAASD,EAAQ,GAEjBG,GAAW,QAGxB,CAACH,EAAOf,EAAMsB,MACjBe,qBAAU,WACNlB,MACD,CAACA,IACJ,IAkBMmB,EAAa,WACf,OACI,qCACI,cAAC,EAAD,CACInC,KAAK,aACLD,QAAS,WACLY,OAAaF,GACbO,OAGR,cAAC,EAAD,CACIhB,KAAK,OACLD,QAAS,WACLF,EAAMuC,cAM1B,OAAIjC,EAEI,qBACIkC,IAAI,6DACJC,IAAI,YAGLxB,EAEH,sBAAKhB,UAAU,OAAf,UACI,uDACA,cAACqC,EAAD,OAKJ,sBAAKrC,UAAU,OAAf,UACI,oBAAGA,UAAU,SAAb,uBAAiCO,EAAOkC,YACxC,oBAAGzC,UAAU,SAAb,yBAAmCO,EAAOmC,cAC1C,mBACI1C,UAAU,SACV2C,wBAAyB,CAAEC,OAAQrC,EAAOsC,iBAE/BlC,IAAdC,EACG,qBAAKZ,UAAU,iBAAf,SACKS,EAAQqC,KAAI,SAACC,GAAD,OACT,wBACI/C,UAAU,cACVC,QAAS,kBAjEjB,SAAC8C,GACjBlC,EAAakC,IAAWxC,EAAOuB,gBAW3BiB,IAAWxC,EAAOuB,eAClB/B,EAAMiD,SAXU,CAChBC,KAAM,GACNC,OAAQ,GACRC,KAAM,KAQuB5C,EAAOmC,aAEpC3C,EAAMiD,SARY,CAClBC,KAAM,EACNC,QAAS,GACTC,MAAO,IAKwB5C,EAAOmC,aAkDHU,CAAYL,IAE3BJ,wBAAyB,CACrBC,OAAQG,IAFPA,SAOH,IAAdnC,EACA,gCACI,oBAAIZ,UAAU,QAAd,qBACA,cAACqC,EAAD,OAGJ,gCACI,oBAAIrC,UAAU,MAAd,mBACA,oBACI2C,wBAAyB,CACrBC,OACI,yBACArC,EAAOuB,kBAGnB,cAACO,EAAD,WC7BTgB,EA9FC,SAACtD,GAAW,IAAD,EACaK,mBAAS,IADtB,mBAChBkD,EADgB,KACJC,EADI,OAECnD,mBAAS,OAFV,mBAEhBoD,EAFgB,KAEVC,EAFU,OAGarD,mBAAS,OAHtB,mBAGhBsC,EAHgB,KAGJgB,EAHI,OAIStD,mBAAS,OAJlB,mBAIhBqC,EAJgB,KAINkB,EAJM,KAMvBvB,qBAAU,WACNhB,MAAM,wCACDG,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACC,GACH+B,EAAc/B,EAASoC,wBAEhC,IACHxB,qBAAU,WACNqB,EAAQ1D,EAAM8D,QAAQL,MACtBE,EAAc3D,EAAM8D,QAAQnB,YAC5BiB,EAAY5D,EAAM8D,QAAQpB,YAC3B,CAAC1C,EAAM8D,QAAQpB,SAAU1C,EAAM8D,QAAQnB,WAAY3C,EAAM8D,QAAQL,OAEpE,IAAMM,EAAa,SAAC/D,GAChB,OACI,qCACI,uBAAOgE,QAAShE,EAAMiE,GAAtB,SAA2BjE,EAAMkE,QACjC,wBACIjE,UAAU,MACVE,KAAMH,EAAMiE,GACZA,GAAIjE,EAAMiE,GACVE,MAAOnE,EAAMmE,MACbC,SAAU,SAACC,GACPrE,EAAMoE,SAASC,EAAMC,OAAOH,QANpC,SASKnE,EAAMuE,QAAQxB,KAAI,mCAAEoB,EAAF,KAAShE,EAAT,YACf,wBAAQgE,MAAOA,EAAf,SACKhE,GADsBgE,YAS/C,OACI,sBAAKlE,UAAU,2BAAf,UACI,cAAC8D,EAAD,CACIE,GAAG,OACHC,MAAM,QACNC,MAAOV,EACPW,SAAU,SAACD,GACPT,EAAQS,IAEZI,QAAS,CACL,CAAC,MAAO,OACR,CAAC,WAAY,YACb,CAAC,UAAW,iBAGpB,cAACR,EAAD,CACIE,GAAG,aACHC,MAAM,cACNC,MAAOxB,EACPyB,SAAU,SAACD,GACPR,EAAcQ,IAElBI,QAAS,CACL,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,SAAU,UACX,CAAC,OAAQ,WAGjB,cAACR,EAAD,CACIE,GAAG,WACHC,MAAM,YACNC,MAAOzB,EACP0B,SAAU,SAACD,GACPP,EAAYO,IAEhBI,QAAS,CAAC,CAAC,MAAO,QAAQC,OACtBjB,EAAWR,KAAI,SAACL,GAAD,MAAc,CAACA,EAASuB,GAAIvB,EAASvC,YAG5D,cAAC,EAAD,CACIA,KAAK,OACLD,QAAS,WACLF,EAAMyE,OAAOhB,EAAMd,EAAYD,UC0DpCgC,MA9If,WAAgB,IAAD,EACuBrE,mBAAS,GADhC,mBACJsE,EADI,KACOC,EADP,OAEevE,mBAAS,GAFxB,mBAEJwE,EAFI,KAEGC,EAFH,OAG2BzE,oBAAS,GAHpC,mBAGJ0E,EAHI,KAGSC,EAHT,OAImB3E,mBAAS,CACnCoD,KAAM,WACNf,SAAU,MACVC,WAAY,QAPL,mBAIJmB,EAJI,KAIKmB,EAJL,KAULC,EAAUC,cAEhB9C,qBAAU,WACN,IAAI+C,EAAgBC,aAAaC,QAAQ,aACpB,MAAjBF,GACAR,EAAaW,SAASH,IAGT,MADDI,eAAeF,QAAQ,cAEnCN,GAAe,GAEnB,IAAIS,EAAcJ,aAAaC,QAAQ,WACpB,MAAfG,GACAR,EAAWS,KAAKC,MAAMF,MAE3B,IAEH,IAqBMnD,EAAa,WACf,IAAIsD,EAAW,KAcf,OAZIb,IACAa,EACI,cAAC,EAAD,CACIzF,KAAK,WACLD,QAAS,WACLgF,EAAQpD,KAAK,WACbgD,EAASS,SAASC,eAAeF,QAAQ,mBAOrD,sBAAKrF,UAAU,mBAAf,UACI,cAAC,EAAD,CACIE,KAAK,OACLD,QAAS,WACLgF,EAAQpD,KAAK,WACbgD,EAAS,MAGhBc,EACD,cAAC,EAAD,CACIzF,KAAK,UACLD,QAAS,WACLgF,EAAQpD,KAAK,mBAOjC,OACI,sBAAK7B,UAAU,gFAAf,UACI,sBAAKA,UAAU,6BAAf,UACI,6CAAgB0E,KAChB,yCAAYE,QAEhB,oBAAI5E,UAAU,KAAd,wBACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAO4F,KAAK,UAAZ,SACI,cAAC,EAAD,CACIvE,IAlEL,WACX,IAAImC,EAAO,GACU,QAAjBK,EAAQL,OACRA,EAAO,SAAWqC,mBAAmBhC,EAAQL,OAEjD,IAAIf,EAAW,GACU,QAArBoB,EAAQpB,WACRA,EAAW,aAAeoD,mBAAmBhC,EAAQpB,WAEzD,IAAIC,EAAa,GAIjB,MAH2B,QAAvBmB,EAAQnB,aACRA,EAAa,eAAiBmD,mBAAmBhC,EAAQnB,aAGzD,uCACAc,EACAf,EACAC,EAiDiBoD,GACLxD,KAAM,WACF2C,EAAQpD,KAAK,MAEjBmB,SAAU,SAAC+C,GACHnB,EAAQmB,IAAU,GAAMjB,GACxBC,GAAe,GAEfH,EAAQmB,EAAQrB,IAChBC,EAAaC,EAAQmB,GACrBX,aAAaY,QACT,aACCpB,EAAQmB,GAAOE,aAGxBV,eAAeS,QAAQ,YAAapB,EAAQmB,GAC5ClB,EAASD,EAAQmB,QAI7B,cAAC,IAAD,CAAOH,KAAK,WAAZ,SACI,cAAC,EAAD,CACIpB,OAAQ,SAAChB,EAAMd,EAAYD,GACvBwC,EAAQpD,KAAK,KACbmD,EAAW,CACPxB,KAAMA,EACNf,SAAUA,EACVC,WAAYA,IAEhB0C,aAAaY,QACT,UACAP,KAAKS,UAAU,CACX1C,KAAMA,EACNf,SAAUA,EACVC,WAAYA,MAIxBmB,QAASA,MAGjB,cAAC,IAAD,CAAO+B,KAAK,IAAZ,SACI,cAACvD,EAAD,aCjIL8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9E,MAAK,YAAkD,IAA/C+E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCCdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAYC,SAAS,IAArB,SACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.0eeb2225.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button\r\n            className=\"bg-blue b--light-blue br3 f2 pa2 ma2 grow\"\r\n            onClick={props.onClick}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React, { useState, useEffect, useCallback } from \"react\"\r\nimport Button from \"./Button\"\r\n\r\nfunction Trivia(props) {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [trivia, setTrivia] = useState({})\r\n    const [answers, setAnswers] = useState([])\r\n    const [isCorrect, setIsCorrect] = useState(undefined)\r\n    const [retry, setRetry] = useState(0)\r\n    const [isError, setIsError] = useState(false)\r\n    const getTrivia = useCallback(() => {\r\n        setIsLoading(true)\r\n        fetch(props.url, {\r\n            mode: \"cors\",\r\n        })\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((response) => {\r\n                setRetry(0)\r\n                setTrivia(response.results[0])\r\n                let allAnswer = response.results[0].incorrect_answers\r\n                allAnswer.push(response.results[0].correct_answer)\r\n                allAnswer.sort(() => 0.5 - Math.random())\r\n                setAnswers(allAnswer)\r\n                setIsLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                if (retry < 3) {\r\n                    setRetry(retry + 1)\r\n                } else {\r\n                    setIsError(true)\r\n                }\r\n            })\r\n    }, [retry, props.url])\r\n    useEffect(() => {\r\n        getTrivia()\r\n    }, [getTrivia])\r\n    const checkAnswer = (answer) => {\r\n        setIsCorrect(answer === trivia.correct_answer)\r\n        let correctScores = {\r\n            easy: 25,\r\n            medium: 50,\r\n            hard: 100,\r\n        }\r\n        let incorrectScores = {\r\n            easy: 0,\r\n            medium: -10,\r\n            hard: -25,\r\n        }\r\n        if (answer === trivia.correct_answer) {\r\n            props.onAnswer(correctScores[trivia.difficulty])\r\n        } else {\r\n            props.onAnswer(incorrectScores[trivia.difficulty])\r\n        }\r\n    }\r\n    const ButtonList = () => {\r\n        return (\r\n            <>\r\n                <Button\r\n                    name=\"Play Again\"\r\n                    onClick={() => {\r\n                        setIsCorrect(undefined)\r\n                        getTrivia()\r\n                    }}\r\n                />\r\n                <Button\r\n                    name=\"Exit\"\r\n                    onClick={() => {\r\n                        props.exit()\r\n                    }}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n    if (isLoading) {\r\n        return (\r\n            <img\r\n                src=\"https://c.tenor.com/I6kN-6X7nhAAAAAj/loading-buffering.gif\"\r\n                alt=\"loading\"\r\n            />\r\n        )\r\n    } else if (isError) {\r\n        return (\r\n            <div className=\"w-75\">\r\n                <h1>An error has occurred</h1>\r\n                <ButtonList />\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"w-75\">\r\n                <p className=\"ma1 f4\">Category: {trivia.category}</p>\r\n                <p className=\"ma1 f4\">Difficulty: {trivia.difficulty}</p>\r\n                <p\r\n                    className=\"ma1 f2\"\r\n                    dangerouslySetInnerHTML={{ __html: trivia.question }}\r\n                ></p>\r\n                {isCorrect === undefined ? (\r\n                    <div className=\"flex flex-wrap\">\r\n                        {answers.map((answer) => (\r\n                            <button\r\n                                className=\"w-50 pa3 f3\"\r\n                                onClick={() => checkAnswer(answer)}\r\n                                key={answer}\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: answer,\r\n                                }}\r\n                            ></button>\r\n                        ))}\r\n                    </div>\r\n                ) : isCorrect === true ? (\r\n                    <div>\r\n                        <h1 className=\"green\">Correct</h1>\r\n                        <ButtonList />\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <h1 className=\"red\">Wrong</h1>\r\n                        <h2\r\n                            dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                    \"The correct answer is \" +\r\n                                    trivia.correct_answer,\r\n                            }}\r\n                        ></h2>\r\n                        <ButtonList />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Trivia\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Button from \"./Button\"\r\n\r\nconst Setting = (props) => {\r\n    const [categories, setCategories] = useState([])\r\n    const [type, setType] = useState(\"any\")\r\n    const [difficulty, setDifficulty] = useState(\"any\")\r\n    const [category, setCategory] = useState(\"any\")\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://opentdb.com/api_category.php\")\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((response) => {\r\n                setCategories(response.trivia_categories)\r\n            })\r\n    }, [])\r\n    useEffect(() => {\r\n        setType(props.setting.type)\r\n        setDifficulty(props.setting.difficulty)\r\n        setCategory(props.setting.category)\r\n    }, [props.setting.category, props.setting.difficulty, props.setting.type])\r\n\r\n    const SelectForm = (props) => {\r\n        return (\r\n            <>\r\n                <label htmlFor={props.id}>{props.label}</label>\r\n                <select\r\n                    className=\"mv2\"\r\n                    name={props.id}\r\n                    id={props.id}\r\n                    value={props.value}\r\n                    onChange={(event) => {\r\n                        props.onChange(event.target.value)\r\n                    }}\r\n                >\r\n                    {props.options.map(([value, name]) => (\r\n                        <option value={value} key={value}>\r\n                            {name}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-column w-40 f3\">\r\n            <SelectForm\r\n                id=\"type\"\r\n                label=\"Type:\"\r\n                value={type}\r\n                onChange={(value) => {\r\n                    setType(value)\r\n                }}\r\n                options={[\r\n                    [\"any\", \"Any\"],\r\n                    [\"multiple\", \"Multiple\"],\r\n                    [\"boolean\", \"True/False\"],\r\n                ]}\r\n            />\r\n            <SelectForm\r\n                id=\"difficulty\"\r\n                label=\"Difficulty:\"\r\n                value={difficulty}\r\n                onChange={(value) => {\r\n                    setDifficulty(value)\r\n                }}\r\n                options={[\r\n                    [\"any\", \"Any\"],\r\n                    [\"easy\", \"Easy\"],\r\n                    [\"medium\", \"Medium\"],\r\n                    [\"hard\", \"Hard\"],\r\n                ]}\r\n            />\r\n            <SelectForm\r\n                id=\"category\"\r\n                label=\"Category:\"\r\n                value={category}\r\n                onChange={(value) => {\r\n                    setCategory(value)\r\n                }}\r\n                options={[[\"any\", \"Any\"]].concat(\r\n                    categories.map((category) => [category.id, category.name])\r\n                )}\r\n            />\r\n            <Button\r\n                name=\"Back\"\r\n                onClick={() => {\r\n                    props.onBack(type, difficulty, category)\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting\r\n","import React, { useState, useEffect } from \"react\"\nimport { Switch, Route, useHistory } from \"react-router-dom\"\nimport Button from \"./Components/Button\"\nimport Trivia from \"./Components/Trivia\"\nimport Setting from \"./Components/Setting\"\n\nfunction App() {\n    const [highscore, setHighscore] = useState(0)\n    const [score, setScore] = useState(0)\n    const [hasOldScore, setHasOldScore] = useState(false)\n    const [setting, setSetting] = useState({\n        type: \"multiple\",\n        category: \"any\",\n        difficulty: \"any\",\n    })\n\n    const history = useHistory()\n\n    useEffect(() => {\n        let lastHighscore = localStorage.getItem(\"highscore\")\n        if (lastHighscore != null) {\n            setHighscore(parseInt(lastHighscore))\n        }\n        let lastScore = sessionStorage.getItem(\"lastscore\")\n        if (lastScore != null) {\n            setHasOldScore(true)\n        }\n        let lastSetting = localStorage.getItem(\"setting\")\n        if (lastSetting != null) {\n            setSetting(JSON.parse(lastSetting))\n        }\n    }, [])\n\n    const getURL = () => {\n        let type = \"\"\n        if (setting.type !== \"any\") {\n            type = \"&type=\" + encodeURIComponent(setting.type)\n        }\n        let category = \"\"\n        if (setting.category !== \"any\") {\n            category = \"&category=\" + encodeURIComponent(setting.category)\n        }\n        let difficulty = \"\"\n        if (setting.difficulty !== \"any\") {\n            difficulty = \"&difficulty=\" + encodeURIComponent(setting.difficulty)\n        }\n        return (\n            \"https://opentdb.com/api.php?amount=1\" +\n            type +\n            category +\n            difficulty\n        )\n    }\n\n    const ButtonList = () => {\n        let Continue = null\n\n        if (hasOldScore) {\n            Continue = (\n                <Button\n                    name=\"Continue\"\n                    onClick={() => {\n                        history.push(\"/trivia\")\n                        setScore(parseInt(sessionStorage.getItem(\"lastscore\")))\n                    }}\n                />\n            )\n        }\n\n        return (\n            <div className=\"flex flex-column\">\n                <Button\n                    name=\"Play\"\n                    onClick={() => {\n                        history.push(\"/trivia\")\n                        setScore(0)\n                    }}\n                />\n                {Continue}\n                <Button\n                    name=\"Setting\"\n                    onClick={() => {\n                        history.push(\"/setting\")\n                    }}\n                />\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"flex flex-column items-center justify-center vh-100 bg-lightest-blue relative\">\n            <div className=\"absolute top-0 right-0 ph4\">\n                <h2>Highscore: {highscore}</h2>\n                <h2>Score: {score}</h2>\n            </div>\n            <h1 className=\"f1\">Fun Trivia</h1>\n            <Switch>\n                <Route path=\"/trivia\">\n                    <Trivia\n                        url={getURL()}\n                        exit={() => {\n                            history.push(\"/\")\n                        }}\n                        onAnswer={(point) => {\n                            if (score + point !== 0 && !hasOldScore) {\n                                setHasOldScore(true)\n                            }\n                            if (score + point > highscore) {\n                                setHighscore(score + point)\n                                localStorage.setItem(\n                                    \"highscore\",\n                                    (score + point).toString()\n                                )\n                            }\n                            sessionStorage.setItem(\"lastscore\", score + point)\n                            setScore(score + point)\n                        }}\n                    />\n                </Route>\n                <Route path=\"/setting\">\n                    <Setting\n                        onBack={(type, difficulty, category) => {\n                            history.push(\"/\")\n                            setSetting({\n                                type: type,\n                                category: category,\n                                difficulty: difficulty,\n                            })\n                            localStorage.setItem(\n                                \"setting\",\n                                JSON.stringify({\n                                    type: type,\n                                    category: category,\n                                    difficulty: difficulty,\n                                })\n                            )\n                        }}\n                        setting={setting}\n                    />\n                </Route>\n                <Route path=\"/\">\n                    <ButtonList />\n                </Route>\n            </Switch>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"tachyons\"\nimport { HashRouter } from \"react-router-dom\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter basename=\"/\">\n            <App />\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}