{"version":3,"sources":["Components/Button.js","Components/Trivia.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","onClick","name","Trivia","useState","isLoading","setIsLoading","trivia","setTrivia","answers","setAnswers","undefined","isCorrect","setIsCorrect","getTrivia","fetch","then","response","json","results","allAnswer","incorrect_answers","push","correct_answer","sort","Math","random","useEffect","ButtonList","exit","src","alt","category","difficulty","dangerouslySetInnerHTML","__html","question","map","answer","onAnswer","checkAnswer","App","isPlaying","setIsPlaying","highscore","setHighscore","score","setScore","lastHighscore","localStorage","getItem","parseInt","point","setItem","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0ffde4f6.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button\r\n            className=\"bg-blue b--light-blue br3 f2 pa2 ma2 grow\"\r\n            onClick={props.onClick}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React, { useState, useEffect } from \"react\"\r\nimport Button from \"./Button\"\r\n\r\nfunction Trivia(props) {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [trivia, setTrivia] = useState({})\r\n    const [answers, setAnswers] = useState([])\r\n    const [isCorrect, setIsCorrect] = useState(undefined)\r\n    const getTrivia = () => {\r\n        setIsLoading(true)\r\n        fetch(\"https://opentdb.com/api.php?amount=1&type=multiple\")\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((response) => {\r\n                setTrivia(response.results[0])\r\n                let allAnswer = response.results[0].incorrect_answers\r\n                allAnswer.push(response.results[0].correct_answer)\r\n                allAnswer.sort(() => 0.5 - Math.random())\r\n                setAnswers(allAnswer)\r\n                setIsLoading(false)\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        getTrivia()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    const checkAnswer = (answer) => {\r\n        setIsCorrect(answer === trivia.correct_answer)\r\n        if (answer === trivia.correct_answer) {\r\n            props.onAnswer(100)\r\n        } else {\r\n            props.onAnswer(-25)\r\n        }\r\n    }\r\n    const ButtonList = () => {\r\n        return (\r\n            <>\r\n                <Button\r\n                    name=\"Play Again\"\r\n                    onClick={() => {\r\n                        setIsCorrect(undefined)\r\n                        getTrivia()\r\n                    }}\r\n                />\r\n                <Button\r\n                    name=\"Exit\"\r\n                    onClick={() => {\r\n                        props.exit()\r\n                    }}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n    if (isLoading) {\r\n        return (\r\n            <img\r\n                src=\"https://c.tenor.com/I6kN-6X7nhAAAAAj/loading-buffering.gif\"\r\n                alt=\"loading\"\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"w-75\">\r\n                <p className=\"ma1 f4\">Category: {trivia.category}</p>\r\n                <p className=\"ma1 f4\">Difficulty: {trivia.difficulty}</p>\r\n                <p\r\n                    className=\"ma1 f2\"\r\n                    dangerouslySetInnerHTML={{ __html: trivia.question }}\r\n                ></p>\r\n                {isCorrect === undefined ? (\r\n                    <div className=\"flex flex-wrap\">\r\n                        {answers.map((answer) => (\r\n                            <button\r\n                                className=\"w-50 pa3 f3\"\r\n                                onClick={() => checkAnswer(answer)}\r\n                                dangerouslySetInnerHTML={{\r\n                                    __html: answer,\r\n                                }}\r\n                            ></button>\r\n                        ))}\r\n                    </div>\r\n                ) : isCorrect === true ? (\r\n                    <div>\r\n                        <h1 className=\"green\">Correct</h1>\r\n                        <ButtonList />\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <h1 className=\"red\">Wrong</h1>\r\n                        <h2\r\n                            dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                    \"The correct answer is \" +\r\n                                    trivia.correct_answer,\r\n                            }}\r\n                        ></h2>\r\n                        <ButtonList />\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Trivia\r\n","import React, { useState, useEffect } from \"react\"\nimport Button from \"./Components/Button\"\nimport Trivia from \"./Components/Trivia\"\n\nfunction App() {\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [highscore, setHighscore] = useState(0)\n    const [score, setScore] = useState(0)\n    useEffect(() => {\n        let lastHighscore = localStorage.getItem(\"highscore\")\n        if (lastHighscore != null) {\n            setHighscore(parseInt(lastHighscore))\n        }\n    }, [])\n    return (\n        <div className=\"flex flex-column items-center justify-center vh-100 bg-lightest-blue relative\">\n            <div className=\"absolute top-0 right-0 ph4\">\n                <h2>Highscore: {highscore}</h2>\n                <h2>Score: {score}</h2>\n            </div>\n            <h1 className=\"f1\">Fun Trivia</h1>\n            {isPlaying ? (\n                <Trivia\n                    exit={() => {\n                        setIsPlaying(false)\n                    }}\n                    onAnswer={(point) => {\n                        if (score + point > highscore) {\n                            setHighscore(score + point)\n                            localStorage.setItem(\n                                \"highscore\",\n                                (score + point).toString()\n                            )\n                        }\n                        setScore(score + point)\n                    }}\n                />\n            ) : (\n                <Button\n                    name=\"Play\"\n                    onClick={() => {\n                        setIsPlaying(true)\n                    }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"tachyons\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}